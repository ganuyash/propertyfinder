package com.pronto.licenseserver.test.execution;

import java.io.File;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.pronto.licenseserver.test.dataobject.LoginData;
import com.pronto.licenseserver.test.dataobject.SearchPanelData;
import com.pronto.licenseserver.test.helper.HtmlTableHandler;
import com.pronto.licenseserver.test.helper.KeywordHandler;
import com.pronto.licenseserver.test.helper.LoginForm;
import com.pronto.licenseserver.test.helper.PageWaitHandler;
import com.pronto.licenseserver.test.helper.ResultHandler;
import com.pronto.licenseserver.test.helper.TestCasePrevLoad;
import com.pronto.licenseserver.test.pageobject.CustomerDetailsPage;
import com.pronto.licenseserver.test.pageobject.Dashboard;
import com.pronto.licenseserver.test.pageobject.HomePage;
import com.pronto.licenseserver.test.pageobject.LoginPage;
import com.pronto.licenseserver.test.utils.FileOperations;

public class SearchPanelValidationExecution extends TestCasePrevLoad {

	int execuionCount = 1;// Value set to 1, skip the headers
	String status;
	String reject = "Empty";
	String path = "data/TestCases/SearchPanel.xls";
	
	@Test(dataProvider = "searchPanelData", dataProviderClass = SearchPanelData.class)
	public void searchPanelValidation(String TestCaseNo, String userName,
			String password, String condition, String accountCode,
			String accountName, String branch, String accountType,
			String actionButton, String rowCount, String validationCondition)
			throws Exception {
		try {

			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			WebDriverWait wait = new WebDriverWait(driver, 20);

			// setting login Data
//			LoginData loginData = new LoginData();
//			loginData.setUserName(userName);
//			loginData.setPassword(password);
 
			driver.get("http://172.17.4.74:8080/LicensingServer/login");

//			LoginPage loginPage = new LoginPage(driver);
			HomePage hm = LoginForm.login(driver, userName, password);
			PageWaitHandler.waitForAjax(30, driver);
			Assert.assertEquals(driver.getTitle().contains("License Hub"), true);

			// Navigate to DashBoard Page
			Thread.sleep(2000);
			Dashboard dasboardPage = hm.clickDashboard(condition);
			PageWaitHandler.waitForAjax(30, driver);
			Thread.sleep(2000);
//			Assert.assertEquals(
//					dasboardPage.getPageTitle(condition).equalsIgnoreCase(
//							KeywordHandler.dashboardPageTitle), true);

			// setting searcing criteria
			SearchPanelData searchData = new SearchPanelData();
			searchData.setAccountCode(accountCode);
			searchData.setAccountName(accountName);
			searchData.setAccountType(accountType);
			searchData.setBranch(branch);

			if (actionButton.equalsIgnoreCase("Search")) {
				dasboardPage.newSearch(searchData);
				PageWaitHandler.waitForAjax(30, driver);
				CustomerDetailsPage cusDetailPage = dasboardPage
						.clickFirstRowViewElement();
				PageWaitHandler.waitForAjax(30, driver);
				Assert.assertEquals(cusDetailPage.getPageTitle(""),
						"Customer details");
				if (validationCondition.equalsIgnoreCase("AccountCode")) {
					PageWaitHandler.waitForAjax(30, driver);
					Assert.assertEquals(cusDetailPage.getAccountCode(),
							accountCode);
				} else if (validationCondition.equalsIgnoreCase("AccountName")) {
					PageWaitHandler.waitForAjax(30, driver);
					Assert.assertEquals(cusDetailPage.getAccountName(),
							accountName);
				} else if (validationCondition.equalsIgnoreCase("Branch")) {
					PageWaitHandler.waitForAjax(30, driver);
					Assert.assertEquals(cusDetailPage.getBranch(), branch);
				} else if (validationCondition.equalsIgnoreCase("AccountType")) {
					PageWaitHandler.waitForAjax(30, driver);
					Assert.assertEquals(cusDetailPage.getAccountType(),
							accountType);
				}
				// Assert.assertEquals(actual, expected);

			} else if (actionButton.equalsIgnoreCase("Reset")) {
				int prevValue = 0;
				int newValue = 0;
				dasboardPage.newSearch(searchData);
				PageWaitHandler.waitForAjax(30, driver);
				prevValue = Integer.valueOf(HtmlTableHandler.getTableRowCount(driver,"customerList"));
				System.out.println("Prev Vlaue : "+ prevValue);
				Thread.sleep(3000);
				dasboardPage.clickReset();
				PageWaitHandler.waitForAjax(30, driver);
				newValue = Integer.valueOf(HtmlTableHandler.getTableRowCount(driver,"customerList"));
				System.out.println("New Value : "+newValue);
				Assert.assertFalse(prevValue>=newValue, "Row count of the table is not grater than before reset..");
			}

			PageWaitHandler.waitForAjax(30, driver);
			status = KeywordHandler.testPass;
		} catch (AssertionError e) {
			// if above steps failed Status should be set to fail
			e.printStackTrace();
			System.out.println("AssertionError");
			status = KeywordHandler.testFail;
			reject = e.getMessage();
			FileOperations.captureScreenshot(
					new Exception().getStackTrace()[0].getMethodName(), driver,
					TestCaseNo);
			throw e;
		} catch (Exception e) {
			// if above steps failed Status should be set to fail
			e.printStackTrace();
			status = KeywordHandler.testFail;
			reject = e.getMessage();
			FileOperations.captureScreenshot(
					new Exception().getStackTrace()[0].getMethodName(), driver,
					TestCaseNo);
			throw e;
		} finally {

			ResultHandler.writeStatus(new File(path),
					new Exception().getStackTrace()[0].getMethodName(),
					execuionCount, status, reject);
			data.add(new String[] {
					new Exception().getStackTrace()[0].getMethodName(),
					String.valueOf(execuionCount), status, reject });
			System.out.println(new File(path) + "  "
					+ new Exception().getStackTrace()[0].getMethodName() + " "
					+ execuionCount + " " + status);
			execuionCount++;
		}
	}
}
