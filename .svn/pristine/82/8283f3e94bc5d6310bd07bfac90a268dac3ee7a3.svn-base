package com.pronto.licenseserver.test.execution;

import java.io.File;
import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.pronto.licenseserver.test.dataobject.LoginData;
import com.pronto.licenseserver.test.dataobject.UsageFilterData;
import com.pronto.licenseserver.test.helper.KeywordHandler;
import com.pronto.licenseserver.test.helper.LoginForm;
import com.pronto.licenseserver.test.helper.PageWaitHandler;
import com.pronto.licenseserver.test.helper.RequestSend;
import com.pronto.licenseserver.test.helper.ResultHandler;
import com.pronto.licenseserver.test.helper.TestCasePrevLoad;
import com.pronto.licenseserver.test.helper.UsageDelete;
import com.pronto.licenseserver.test.pageobject.HomePage;
import com.pronto.licenseserver.test.pageobject.LoginPage;
import com.pronto.licenseserver.test.pageobject.MonthlyUsageDetailsPage;
import com.pronto.licenseserver.test.pageobject.UsageDetailFilterPage;
import com.pronto.licenseserver.test.utils.FileOperations;
import com.pronto.licenseserver.test.utils.NumberFormatter;


public class UsageValidationExecution extends TestCasePrevLoad {

	int execuionCount = 1;// Value set to 1, skip the headers
	String status;
	String reject = "Empty";
	String path = "data/TestCases/Usage_Test.xls";

	@Test(dataProvider = "usageFilterData", dataProviderClass = UsageFilterData.class)
	public void overallUsageValidation(String TestCaseNo , String userName, String password,
			String condition, String month, String year, String siteSerial,
			String cusSequance, String usageType, String totMeteredData,
			String totMeteredCalls, String precentageData,
			String precentageCall, String associatedPlan, String excededPlan,
			String xmlFilePath) throws Exception {

		// Clearing usage data before executing test
		// UsageDelete.emptyUsageTable(siteSerial);

		try {
			if (UsageDelete.emptyUsageTable(siteSerial)
					& RequestSend.sendHttpRequestLoop(xmlFilePath)) {

				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				WebDriverWait wait = new WebDriverWait(driver, 20);

				// setting login Data
//				LoginData loginData = new LoginData();
//				loginData.setUserName(userName);
//				loginData.setPassword(password);

				driver.get("http://172.17.4.74:8080/LicensingServer/login");

//				LoginPage loginPage = new LoginPage(driver);
				HomePage hm = LoginForm.login(driver, userName, password);
				PageWaitHandler.waitForAjax(30, driver);
				Assert.assertEquals(driver.getTitle().contains("License Hub"),
						true);

				// Navigate to Usage Details Filter Page

				UsageDetailFilterPage usageDetailFilterPage = hm.clickUsage();
				PageWaitHandler.waitForAjax(30, driver);
				Assert.assertEquals(
						usageDetailFilterPage
								.getPageTitle(condition)
								.equalsIgnoreCase(KeywordHandler.usagePageTitle),
						true);

				// setting filtering criteria

				UsageFilterData usageFilterData = new UsageFilterData();
				usageFilterData.setMonth(month);
				usageFilterData.setYear(year);
				usageFilterData.setAccount(cusSequance);
				usageFilterData.setUsageType(usageType);
				MonthlyUsageDetailsPage monthlyUsageDetailsPage = (MonthlyUsageDetailsPage) usageDetailFilterPage
						.newUsageFilter(usageFilterData);
				PageWaitHandler.waitForAjax(30, driver);
				Assert.assertEquals(monthlyUsageDetailsPage.getPageTitle()
						.contains(KeywordHandler.monthlyUsageSummaryPageTitle),
						true);

				// Validation Logic goes here
				PageWaitHandler.waitForAjax(30, driver);
				Collection<String> expected = Arrays.asList(excededPlan
						.split(","));
				System.out.println(expected);
				Assert.assertEquals(
						monthlyUsageDetailsPage.getAssociatedPlan(),
						associatedPlan);
				Assert.assertEquals(
						monthlyUsageDetailsPage.getExceededPlans(condition),
						expected);
				Assert.assertEquals(
						monthlyUsageDetailsPage.getMeteredTotalBytes(),
						NumberFormatter.getFormettedNumber(totMeteredData));
				Assert.assertEquals(
						monthlyUsageDetailsPage.getMeteredTotalAPICalls(),
						NumberFormatter.getFormettedNumber(totMeteredCalls));
				Assert.assertEquals(monthlyUsageDetailsPage
						.getMeteredTotalBytesPrecentage(), precentageData);
				Assert.assertEquals(monthlyUsageDetailsPage
						.getMeteredTotalAPICallsPrecentage(), precentageCall);
				
				// If all above steps passed status should be set as PASS
				status = KeywordHandler.testPass;

			} else {
				status = KeywordHandler.testFail;
				System.out.println("Failed Due to HTTP request");
			}

		} catch (AssertionError e) {
			// if above steps failed Status should be set to fail
			e.printStackTrace();
			System.out.println("AssertionError");
			status = KeywordHandler.testFail;
			reject = e.getMessage();
			FileOperations.captureScreenshot(
					new Exception().getStackTrace()[0].getMethodName(), driver,
					TestCaseNo);
			throw e;
		} catch (Exception e) {
			// if above steps failed Status should be set to fail
			e.printStackTrace();
			status = KeywordHandler.testFail;
			reject = e.getMessage();
			FileOperations.captureScreenshot(
					new Exception().getStackTrace()[0].getMethodName(), driver,
					TestCaseNo);
			throw e;
		} finally {
			UsageDelete.emptyUsageTable(siteSerial);
			ResultHandler.writeStatus(new File(path),
					new Exception().getStackTrace()[0].getMethodName(),
					execuionCount, status, reject);
			System.out.println(new File(path) + "  "
					+ new Exception().getStackTrace()[0].getMethodName() + " "
					+ execuionCount + " " + status);
			execuionCount++;
		}

	}
}
